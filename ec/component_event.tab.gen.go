/*
 * This file is part of Golaxy Distributed Service Development Framework.
 *
 * Golaxy Distributed Service Development Framework is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 2.1 of the License, or
 * (at your option) any later version.
 *
 * Golaxy Distributed Service Development Framework is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with Golaxy Distributed Service Development Framework. If not, see <http://www.gnu.org/licenses/>.
 *
 * Copyright (c) 2024 pangdogs.
 */

// Code generated by eventc eventtab --name=componentEventTab; DO NOT EDIT.

package ec

import (
	event "git.golaxy.org/core/event"
)

type IComponentEventTab interface {
	EventComponentEnableChanged() event.IEvent
	EventComponentDestroySelf() event.IEvent
}

var (
	_componentEventTabId = event.DeclareEventTabIdT[componentEventTab]()
	EventComponentEnableChangedId = _componentEventTabId + 0
	EventComponentDestroySelfId = _componentEventTabId + 1
)

type componentEventTab [2]event.Event

func (eventTab *componentEventTab) Init(autoRecover bool, reportError chan error, recursion event.EventRecursion) {
	(*eventTab)[0].Init(autoRecover, reportError, event.EventRecursion_Deepest)
	(*eventTab)[1].Init(autoRecover, reportError, event.EventRecursion_Discard)
}

func (eventTab *componentEventTab) Enable() {
	for i := range *eventTab {
		(*eventTab)[i].Enable()
	}
}

func (eventTab *componentEventTab) Disable() {
	for i := range *eventTab {
		(*eventTab)[i].Disable()
	}
}

func (eventTab *componentEventTab) UnbindAll() {
	for i := range *eventTab {
		(*eventTab)[i].UnbindAll()
	}
}

func (eventTab *componentEventTab) Ctrl() event.IEventCtrl {
	return eventTab
}

func (eventTab *componentEventTab) Event(id uint64) event.IEvent {
	if _componentEventTabId != id & 0xFFFFFFFF00000000 {
		return nil
	}
	pos := id & 0xFFFFFFFF
	if pos >= uint64(len(*eventTab)) {
		return nil
	}
	return &(*eventTab)[pos]
}

func (eventTab *componentEventTab) EventComponentEnableChanged() event.IEvent {
	return &(*eventTab)[0]
}

func (eventTab *componentEventTab) EventComponentDestroySelf() event.IEvent {
	return &(*eventTab)[1]
}
